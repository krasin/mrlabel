// Code generated by go-bindata.
// sources:
// data/mrlabel.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataMrlabelHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x56\x4f\x73\x9b\x38\x14\xbf\xfb\x53\xbc\xa1\xe9\x04\xe2\x46\x18\x9c\x6e\x77\x13\x9c\xc3\xde\xf6\xb0\xbb\xb3\xe7\x6c\x26\x83\x41\x36\x72\x40\xa2\x92\x48\xed\x69\xfd\xdd\xf7\x49\x18\x90\x6d\xd2\x49\xa7\xdb\xa9\x03\xe8\xfd\xff\xfd\xde\x93\x94\x14\xba\x2a\xef\x27\x49\x41\xd3\xfc\x7e\x02\x90\xa8\x4c\xb2\x5a\x83\x92\xd9\xc2\x63\x55\xba\xa6\x8a\xe8\xad\xf6\xee\x93\xb0\x95\x9c\x29\x15\x5a\xd7\xea\x36\x0c\xd3\x4d\xba\x25\x6b\x21\xd6\x25\x4d\x6b\xa6\x48\x26\x2a\xbb\x16\x96\x6c\xa9\xc2\xcd\xe7\x86\xca\x5d\x18\x93\x88\xcc\x0f\x1f\xa4\x62\x9c\x6c\xd4\x89\xeb\x92\xf1\x67\x90\xb4\x5c\x78\x4a\xef\x4a\xaa\x0a\x4a\xb5\x07\x85\xa4\xab\x1f\x0b\xd5\xb0\x30\x22\x51\x44\x6e\x42\x5d\xd0\x8a\xaa\x50\x55\x42\xe8\x82\x53\xd5\x69\x5c\x37\x8c\x64\x0a\xe3\xff\x4c\x45\x43\x98\xc1\xe9\x68\x5d\xc3\x2b\xfe\x5f\x35\x3c\xd3\x4c\x70\xa8\xa9\xac\x1a\x4d\xff\x69\xa8\x32\xdf\xca\x0f\xe0\x2b\xca\x51\x43\x48\xf0\x5f\x52\x09\x0c\x16\x30\xbb\xc3\x47\x02\x9f\x3b\x2d\x52\x52\xbe\xd6\x05\x5c\x43\x84\x92\xe9\xb4\x33\x02\x30\x16\x28\x44\x9b\x11\x65\x66\x0d\x1c\x4d\x96\x6f\x51\x93\xc1\x14\x22\xfc\xfd\x99\xea\x82\xac\x4a\x21\xa4\x6f\x5f\x65\xca\x73\x51\x61\x46\x57\xc6\x65\x00\xef\xcd\xc3\x35\xd7\x55\xed\x06\x7a\x40\x77\x8f\x9d\xfc\x78\xf5\x58\x6d\x4c\xc9\xa8\xa0\xbf\x56\xb2\x9f\xb4\xbf\x4e\xfe\x87\xcd\xf3\xda\xe6\xde\x43\xc7\xe9\x56\x77\xb8\xf5\xb0\x39\x16\xd3\x69\xeb\x8c\xad\xc0\x77\x1d\xdd\x9f\x63\x33\xe0\x77\xe1\x7b\xef\xb2\x46\x3e\xd9\xce\xf7\x02\x92\x6a\x2d\x7d\x0f\xbb\xc2\xfb\x00\x7d\x5f\x64\x31\x51\x3a\xd5\x2c\x5b\x95\x2c\x7b\x96\xb6\x2f\xe2\x30\x9a\x7d\x9a\x87\x1f\xe7\x37\x71\x84\xff\xe2\xa7\x8f\xf4\xd3\x72\x99\xc5\xf3\xf9\xfc\x69\x49\x36\xf5\xda\x0b\xba\xaa\x25\xd5\x8d\xe4\x43\xa5\xdf\x8f\x3a\x60\xe4\x14\xf1\x18\x8c\xd6\x36\x8d\x46\xba\xe4\xb8\xb8\x1a\x47\x4b\xa4\x79\x1b\x2a\x7a\x4b\xac\x69\xd4\x45\xdb\x8f\xc6\x8c\x7f\x2c\x66\xfc\xa6\x98\xb1\x1b\x73\x3f\x99\x18\x47\xb9\xc8\x9a\x8a\x72\x1d\x10\x89\x9b\xd5\xce\xef\x3a\xe1\x8c\x7c\x85\xcd\xf2\x70\x68\x32\x3b\x10\x0c\xa7\xde\x34\xba\xdd\xce\x9e\x94\x96\x44\xd5\x25\xd3\xbe\xf7\x2f\xef\x68\x19\x9b\x37\x6b\x77\xa8\x68\x6c\xce\x50\x8c\xca\x17\x44\x4b\x56\xf9\x56\x19\xfb\xb8\xa7\xd9\xe0\xd4\xaa\x2c\xc0\xf3\xe0\xdb\x37\x6b\xf0\x30\x7b\x34\x0b\x97\x77\x97\xa7\x2b\xef\x2e\x07\xf7\x00\x99\xe0\x9a\xf1\x86\x76\xde\xf6\xa7\x23\x43\xea\x46\x15\x36\xc0\x11\x3b\x68\xa7\x44\x49\x49\x29\xd6\xbe\x67\x50\xa7\x39\x78\x38\xdc\x67\xdb\xc1\x14\x97\x87\xc5\x0e\x06\xde\x54\x4f\xcb\x46\xeb\x16\xc4\xd9\x5d\xd7\x9e\xed\x1a\x52\x47\xd3\xac\x18\x90\x67\x3c\xa7\xdb\x21\x6d\xd7\x7a\xba\x18\xf6\x9a\x0b\x5f\x17\x4c\x05\xa4\x95\xf9\x01\xc9\xcc\xe0\x0c\x6e\xe8\x8b\x5b\xba\x61\xc0\x3a\xbe\x73\xd1\xe8\xab\x62\xc1\xb0\x7e\x3a\xdb\x09\xcc\x0c\xac\x6f\x1e\xf7\xd3\x71\x74\x91\xc6\xb4\x49\x2d\x14\x76\x49\x88\x61\xb1\x53\xbf\x42\x7b\x20\x7a\xb7\xaf\x0c\x25\x6e\x11\x65\xba\xa4\x25\x2a\x30\xd8\x07\xbd\x9f\xe3\x9d\xaa\x67\xb4\xe3\xcd\x81\x3e\x2b\x53\xa5\x6c\xaf\xba\x50\xf6\xbb\xf6\xf9\x69\x71\x30\x1d\x09\x60\x48\x13\xf9\x0e\x29\x7b\xa6\xbb\xa6\x76\xc1\x36\x33\xd4\x43\x60\x20\xb4\x4b\xe4\x4b\xc1\xb2\x02\x21\xbc\xf9\x15\xc2\xab\xd9\x55\x68\x90\x74\x25\x88\xe4\xcd\x6f\xd8\x37\x4e\xa2\x2e\x92\xc7\x38\xee\x27\xff\x17\x43\xe3\x7e\xcd\x00\xa6\xb6\x49\xdd\x14\xaf\x31\xf9\x4e\xd3\xed\x99\x71\xbe\xec\x0c\x98\xe1\x40\x47\x3d\x2d\x3f\x41\xba\xc9\xa7\xa7\x7d\x8c\x93\x96\xea\xf6\xef\x70\x39\x48\xc2\xf6\xf2\x95\x18\xbe\xec\x5d\x21\x67\x2f\x78\x36\x2f\x0e\x53\xd7\xde\x50\x70\xb9\xfd\xbc\xff\x4b\x80\x8d\x98\x84\x87\x85\x53\x69\x95\x32\x0e\xaa\x59\x6e\x68\xa6\x01\x67\x34\x2b\x9b\x9c\xf1\xb5\x19\x2a\x3c\xdc\x15\xe6\x99\xc3\x3c\x47\x60\x71\xc8\xa4\x0a\xc6\xfd\xfc\xde\xb0\xd2\x58\x7d\x00\xdc\x19\xeb\x54\x6a\x10\x2b\x10\x9c\x8e\x6b\xff\x8d\x97\x2c\xbc\x10\xec\x6a\x6c\x5e\xd4\x5b\x1e\x8c\xf1\xd6\xa5\x65\x93\x21\x81\x54\xbd\x96\xae\x86\xb4\xd7\x1f\xd4\x5d\xed\x24\x44\x40\xec\xcb\x52\xda\x07\xab\xd6\x16\x9f\xe1\xcc\x04\x7b\x59\x5c\x78\x5f\x58\xae\x8b\xdb\x5f\x66\xef\xef\xa0\xa0\x6c\x5d\x68\xf3\x0e\xe1\x91\xd5\xc9\x11\xd8\x99\xe6\x0c\x0f\x85\x74\x77\xcb\xb1\x48\xef\x7b\x26\xf1\xeb\x26\x98\xb5\xe5\x10\x29\xb5\xd7\xea\xff\x02\x00\x00\xff\xff\x06\x27\x18\xf5\x5e\x0b\x00\x00")

func dataMrlabelHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dataMrlabelHtml,
		"data/mrlabel.html",
	)
}

func dataMrlabelHtml() (*asset, error) {
	bytes, err := dataMrlabelHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/mrlabel.html", size: 2910, mode: os.FileMode(416), modTime: time.Unix(1468205276, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/mrlabel.html": dataMrlabelHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"mrlabel.html": &bintree{dataMrlabelHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
