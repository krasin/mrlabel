// Code generated by go-bindata.
// sources:
// data/mrlabel.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataMrlabelHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x56\x5d\x73\xa3\x36\x17\xbe\xf7\xaf\x38\xc3\xe6\x9d\x40\xbc\x11\x06\x67\x67\xdf\x26\x38\x17\xbd\xeb\x45\xdb\xe9\x75\x9a\xf1\x60\x90\x8d\x1c\x90\x58\x49\xa4\xf6\xec\xfa\xbf\xf7\x48\x18\x90\x6d\xb2\x93\x9d\x6d\x26\xb6\x41\xe7\xfb\x79\xce\x91\x94\x14\xba\x2a\x1f\x27\x49\x41\xd3\xfc\x71\x02\x90\xa8\x4c\xb2\x5a\x83\x92\xd9\xc2\x63\x55\xba\xa1\x8a\xe8\x9d\xf6\x1e\x93\xb0\x95\x5c\x28\x15\x5a\xd7\xea\x3e\x0c\xd3\x6d\xba\x23\x1b\x21\x36\x25\x4d\x6b\xa6\x48\x26\x2a\xbb\x16\x96\x6c\xa5\xc2\xed\x97\x86\xca\x7d\x18\x93\x88\xcc\x8f\x2f\xa4\x62\x9c\x6c\xd5\x99\xeb\x92\xf1\x17\x90\xb4\x5c\x78\x4a\xef\x4b\xaa\x0a\x4a\xb5\x07\x85\xa4\xeb\x1f\x0b\xd5\xb0\x30\x22\x51\x44\xee\x42\x5d\xd0\x8a\xaa\x50\x55\x42\xe8\x82\x53\xd5\x69\xdc\x36\x8c\x64\x0a\xe3\xff\x4c\x45\x43\x98\xc1\xe9\x68\x5d\xc3\x23\xfe\xaf\x1b\x9e\x69\x26\x38\xd4\x54\x56\x8d\xa6\x7f\x35\x54\x99\x77\xe5\x07\xf0\x15\xe5\xa8\x21\x24\xf8\xaf\xa9\x04\x06\x0b\x98\x3d\xe0\x4f\x02\x5f\x3a\x2d\x52\x52\xbe\xd1\x05\xdc\x42\x84\x92\xe9\xb4\x33\x02\x30\x16\x28\x44\x9b\x11\x65\x66\x0d\x1c\x4d\x96\xef\x50\x93\xc1\x14\x22\xfc\xfc\x9e\xea\x82\xac\x4b\x21\xa4\x6f\x1f\x65\xca\x73\x51\x61\x46\x37\xc6\x65\x00\xff\x33\x3f\xae\xb9\xae\x6a\x37\xd0\x13\xba\x7b\xee\xe4\xa7\xab\xa7\x6a\x63\x4a\x46\x05\xfd\xb5\x92\xc3\xa4\xfd\x74\xf2\xdf\x6c\x9e\xb7\x36\xf7\x1e\x3a\x4e\x77\xba\xc3\xad\x87\xcd\xb1\x98\x4e\x5b\x67\x6c\x0d\xbe\xeb\xe8\xf1\x12\x9b\x01\xbf\x2b\xdf\xfb\x90\x35\x72\x69\x3b\xdf\x0b\x48\xaa\xb5\xf4\x3d\xec\x0a\xef\x23\xf4\x7d\x91\xc5\x44\xe9\x54\xb3\x6c\x5d\xb2\xec\x45\xda\xbe\x88\xc3\x68\xf6\x79\x1e\x7e\x9a\xdf\xc5\x11\xfe\xc5\xcb\x4f\xf4\xf3\x6a\x95\xc5\xf3\xf9\x7c\xb9\x22\xdb\x7a\xe3\x05\x5d\xd5\x92\xea\x46\xf2\xa1\xd2\xef\x47\x1d\x30\x72\x8a\x78\x0e\x46\x6b\x9b\x46\x23\x5d\x72\x5a\x5c\x8d\xa3\x25\xd2\xbc\x0d\x15\xbd\x27\xd6\x34\xea\xa2\x1d\x46\x63\xc6\x3f\x16\x33\x7e\x57\xcc\xd8\x8d\x79\x98\x4c\x8c\xa3\x5c\x64\x4d\x45\xb9\x0e\x88\xc4\xcd\x6a\xef\x77\x9d\x70\x41\xbe\xc2\x66\x79\x3a\x36\x99\x1d\x08\x86\x53\x6f\x1a\xdd\x6e\x67\x4b\xa5\x25\x51\x75\xc9\xb4\xef\xfd\xcd\x3b\x5a\xc6\xe6\xcd\xda\x1d\x2b\x1a\x9b\x33\x14\xa3\xf2\x15\xd1\x92\x55\xbe\x55\xc6\x3e\xee\x69\x36\x38\xb5\x2a\x0b\xf0\x3c\xf8\xf6\xcd\x1a\x3c\xcd\x9e\xcd\xc2\xf5\xc3\xf5\xf9\xca\x87\xeb\xc1\x3d\x40\x26\xb8\x66\xbc\xa1\x9d\xb7\xc3\xf9\xc8\x90\xba\x51\x85\x0d\x70\xc2\x0e\xda\x29\x51\x52\x52\x8a\x8d\xef\x19\xd4\x69\x0e\x1e\x0e\xf7\xc5\x76\x30\xc5\xe5\x61\xb1\x83\x81\x37\xd5\x72\xd5\x68\xdd\x82\x38\x7b\xe8\xda\xb3\x5d\x43\xea\x68\x9a\x15\x03\xf2\x8c\xe7\x74\x37\xa4\xed\x5a\x4f\x17\xc3\x5e\x73\xe5\xeb\x82\xa9\x80\xb4\x32\x3f\x20\x99\x19\x9c\xc1\x0d\x7d\x75\x4b\x37\x0c\x58\xc7\x0f\x2e\x1a\x7d\x55\x2c\x18\xd6\xcf\x67\x3b\x81\x99\x81\xf5\xdd\xe3\x7e\x3e\x8e\x2e\xd2\x98\x36\xa9\x85\xc2\x2e\x09\x31\x2c\x76\xea\x57\x68\x0f\x44\xef\xfe\x8d\xa1\xc4\x2d\xa2\x4c\x57\xb4\x44\x05\x06\x87\xa0\xf7\x73\xba\x53\xf5\x8c\x76\xbc\x39\xd0\x67\x65\xaa\x94\xed\x55\x17\xca\x7e\xd7\xbe\x3c\x2d\x8e\xa6\x23\x01\x0c\x69\x22\xdf\x23\x65\x2f\x74\xdf\xd4\x2e\xd8\x66\x86\x7a\x08\x0c\x84\x76\x89\xfc\x53\xb0\xac\x40\x08\xef\xfe\x0f\xe1\xcd\xec\x26\x34\x48\xba\x12\x44\xf2\xee\x17\xec\x1b\x27\x51\x17\xc9\x53\x1c\x0f\x93\xff\x8a\xa1\x71\xbf\x66\x00\x53\xdb\xa4\x6e\x8a\xb7\x98\x7c\xa7\xe9\xf6\xcc\x38\x5f\x76\x06\xcc\x70\xa0\xa3\x9e\x96\x9f\x20\xdd\xe4\xd3\xd3\x3e\xc6\x49\x4b\x75\xfb\x3d\x5c\x0e\x92\xb0\xbd\x7c\x25\x86\x2f\x7b\x57\xc8\xd9\x2b\x9e\xcd\x8b\xe3\xd4\xb5\x37\x14\x5c\x6e\x5f\x1f\xff\x10\x60\x23\x26\xe1\x71\xe1\x5c\x5a\xa5\x8c\x83\x6a\x56\x5b\x9a\x69\xc0\x19\xcd\xca\x26\x67\x7c\x63\x86\x0a\x0f\x77\x85\x79\xe6\x30\xcf\x11\x58\x1c\x32\xa9\x82\x71\x3f\xbf\x36\xac\x34\x56\x1f\x01\x77\xc6\x3a\x95\x1a\xc4\x1a\x04\xa7\xe3\xda\x7f\xe2\x25\x0b\x2f\x04\xfb\x1a\x9b\x17\xf5\x56\x47\x63\xbc\x75\x69\xd9\x64\x48\x20\x55\x6f\xa5\xab\x21\xed\xf5\x07\x75\x57\x3b\x09\x11\x10\xfb\xc0\xaa\x8d\x05\x66\x38\x2c\x21\x3c\x11\x9c\x1d\x6f\x60\xef\x90\x0b\x2f\x67\xb8\xe1\xa7\xfb\x7b\x8e\x05\x7c\xd7\x24\x7e\xdb\x04\x33\xb2\xfc\x20\x5d\xf6\xca\xfc\x6f\x00\x00\x00\xff\xff\x73\x12\xf8\xd4\x3a\x0b\x00\x00")

func dataMrlabelHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dataMrlabelHtml,
		"data/mrlabel.html",
	)
}

func dataMrlabelHtml() (*asset, error) {
	bytes, err := dataMrlabelHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/mrlabel.html", size: 2874, mode: os.FileMode(416), modTime: time.Unix(1457376499, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/mrlabel.html": dataMrlabelHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"mrlabel.html": &bintree{dataMrlabelHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
