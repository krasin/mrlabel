// Code generated by go-bindata.
// sources:
// data/mrlabel.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataMrlabelHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x56\xcd\x52\xe3\x38\x10\xbe\xf3\x14\x5d\x1a\xa6\x70\x30\x48\xb1\x03\xcb\x6c\x62\x73\xdf\xc3\x1e\xf6\xb2\x17\x96\xa2\x64\x5b\x89\x05\xb2\xe4\x91\x64\x48\x6a\x26\xef\xbe\x25\x39\xfe\x21\x31\x5b\x4c\xed\xc5\xb6\xfa\xbf\xbf\xee\x56\x3b\x29\x6d\x25\xee\xcf\x92\x92\xd1\xe2\xfe\x0c\x20\x31\xb9\xe6\xb5\x05\xa3\xf3\x14\xf1\x8a\x6e\x98\xc1\x76\x6b\xd1\x7d\x42\x5a\xce\x89\x50\x69\x6d\x6d\x96\x84\xd0\x67\xba\xc5\x1b\xa5\x36\x82\xd1\x9a\x1b\x9c\xab\xca\xd3\x88\xe0\x99\x21\xcf\xdf\x1b\xa6\x77\x24\xc6\x11\x5e\x1c\x0e\xb8\xe2\x12\x3f\x9b\x23\xd3\x82\xcb\x17\xd0\x4c\xa4\xc8\xd8\x9d\x60\xa6\x64\xcc\x22\x28\x35\x5b\xff\x9a\xab\x86\x93\x08\x47\x11\xbe\x21\xb6\x64\x15\x33\xc4\x54\x4a\xd9\x52\x32\xd3\x49\x5c\x37\x1c\xe7\xc6\xa0\xff\x95\xd1\xe0\x66\x30\x3a\x99\x97\xcf\xc6\x7d\xe1\x9a\xda\xbc\xfc\x9b\xb3\x37\xf8\x71\x06\x00\x50\x70\x53\x0b\xba\x5b\x42\x26\x54\xfe\xb2\xf2\xb4\x5a\x19\x6e\xb9\x92\x4b\xa0\x99\x51\xa2\xb1\xac\xa5\x5b\x55\x2f\x61\xde\x7e\x67\xca\x5a\x55\xf5\x47\xc1\xd6\xb6\x3f\x68\xbe\x29\x87\xd3\x1b\x2f\x6c\xb9\x84\x68\x3e\xff\xda\x12\x4a\xd6\xf2\x3b\xca\xde\x45\x48\xfa\x10\x93\x2e\xee\x33\x80\x75\x23\x73\x17\x09\xd4\x4c\x57\x8d\x65\x7f\x35\xcc\xb8\xb3\x09\x66\x87\xf8\xd7\x4a\x43\xf0\x4a\x35\x70\x48\x61\xbe\x02\x0e\x09\x7c\xef\xa4\xb0\x60\x72\x63\x4b\xb8\x86\x68\x05\x3c\x0c\x3b\x25\x00\xa7\x21\x98\x84\x74\x4a\x98\x7b\x85\x91\x24\x2f\xb6\x90\x02\x87\x10\x22\x08\xe1\x4f\x6a\x4b\xbc\x16\x4a\xe9\xc0\x7f\x6a\x2a\x0b\x55\x05\x33\xb8\x74\x26\x67\xf0\xd5\xbd\xc6\xea\xb6\xaa\xc7\x8e\x1e\x78\xb1\x7d\xec\xf8\xef\xa9\xef\xc5\xa6\x84\x9c\x88\xad\xea\x96\xb3\x3f\xa0\xd7\xf1\xff\xf0\x71\x5e\xfb\xd8\x7b\xe8\x24\xdb\xda\x0e\xb7\x1e\xb6\x91\x46\x18\xb6\xc6\xf8\x1a\x82\xb1\xa1\xfb\x53\x6c\x06\xfc\xce\x03\xf4\x25\x6f\xf4\x93\x1f\x52\x34\xc3\xd4\x5a\x1d\x20\xa3\x73\x74\x05\x7d\x0b\xe7\x31\x36\x96\x5a\x9e\xaf\x05\xcf\x5f\xb4\x6f\xe1\x98\x44\xf3\xbb\x05\xb9\x5d\xdc\xc4\x51\x14\x45\xf1\xd3\x2d\xbb\xcb\xb2\x3c\x5e\x2c\x16\x4f\x19\x7e\xae\x37\x68\xd6\x65\xad\x99\x6d\xb4\x1c\x32\xfd\x6f\xaf\x03\x46\xa3\x24\x1e\x67\x93\xb9\x85\xd1\x44\x97\xbc\x4f\xae\xd6\x4c\x28\x5a\xb4\xae\xa2\xcf\xf8\x0a\xa3\xce\xdb\x7e\xd2\x67\xfc\x6b\x3e\xe3\x4f\xf9\x8c\xc7\x3e\xf7\x6e\x64\xce\x83\x42\xe5\x4d\xc5\xa4\x9d\x61\xcd\x68\xb1\x0b\xba\x4e\x38\x29\xbe\x81\x14\x1e\x0e\x4d\xe6\x07\x82\x4b\xe6\x68\xed\xcd\xfb\x64\xac\xc6\xa6\x16\xdc\x06\xe8\x1f\xd9\x95\x65\x6a\xde\xbc\xde\x21\xa3\xa9\x39\xe3\x92\x41\x0a\xe7\xd8\x6a\x5e\x05\x5e\xf8\x81\x3f\xf6\x65\x76\x38\xb5\x22\x29\x20\x04\x3f\x7f\x7a\x85\x87\xf9\xa3\x23\x5c\xac\x2e\x8e\x29\x5f\x2e\x06\xf3\x00\xb9\x92\x96\xcb\x86\x75\xd6\xf6\xc7\x23\x83\xeb\xc6\x94\xde\xc1\xbb\xea\xe4\x4a\x1a\x25\x18\x16\x6a\x13\x20\x87\x3a\x2b\x00\x41\x78\x7a\x1d\x84\x80\x46\xc4\x0e\x86\xd3\xfb\xa8\xa5\xbf\x1f\xb6\x55\xd7\xb5\x99\x2a\x76\x68\x86\x5f\xd8\xae\xa9\x87\x7a\xb0\x57\x57\xa5\x3e\x19\x07\x84\x27\xe1\xb7\x92\xe7\x25\x24\x70\xf3\x0d\xc8\xe5\xfc\x92\x38\x08\xc6\x9c\xfb\x14\x6e\xef\x80\x5c\xfe\x7e\x49\xc6\x58\x8c\x07\x66\x40\xe2\x78\xae\x13\x98\x3b\x7b\x9f\x1e\xf5\x8f\xec\xba\xd2\x52\xdf\x43\xe3\xd0\xae\xe1\xe6\x5b\x27\x39\xc6\x78\x7a\x3c\x3d\xba\x0e\x76\x2a\x4d\xdf\x10\xe7\xb8\x56\xc6\x06\x88\x08\xb5\x41\x57\xf0\x03\xda\x5f\x01\xb4\xfc\x60\xc6\xaf\x00\x09\x9a\x31\x81\x96\x3e\x9e\xfd\xec\x60\x67\xaa\x16\x7b\xff\x6e\x9f\xc3\x86\x4c\x48\xfb\x07\x92\xb8\x3a\xf9\x1d\x94\x69\xff\x2a\xf8\x2b\xf8\xc5\x94\xa2\x7e\x29\x6a\x26\xa8\xe5\xaf\x6c\xd5\x2e\xb6\xf8\xf6\xb7\x7a\xbb\x3a\xec\xb4\xf6\xe0\x97\x3a\x40\xc2\xab\x0d\xf0\x22\x45\xc3\x95\xd5\x19\xfb\x48\x15\x41\x2e\xa8\x31\x29\xea\xd7\x34\x22\x3e\x10\x52\xf0\x57\xbf\x11\x7b\xa3\x47\x17\x54\x67\xb9\xdb\xe7\x52\x49\x86\xa0\x55\x9e\x54\x89\x3f\x56\x49\x48\x8b\x43\x42\xda\xff\xb3\x7f\x03\x00\x00\xff\xff\x36\x7c\xdd\x46\xa7\x09\x00\x00")

func dataMrlabelHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dataMrlabelHtml,
		"data/mrlabel.html",
	)
}

func dataMrlabelHtml() (*asset, error) {
	bytes, err := dataMrlabelHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/mrlabel.html", size: 2471, mode: os.FileMode(436), modTime: time.Unix(1511135439, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/mrlabel.html": dataMrlabelHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"mrlabel.html": &bintree{dataMrlabelHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

