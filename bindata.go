// Code generated by go-bindata.
// sources:
// data/mrlabel.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataMrlabelHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x57\x5f\x53\xdc\x38\x12\x7f\xe7\x53\x74\x29\xa4\xb0\x19\x90\x67\x0c\x24\x39\xc6\xc3\x43\x72\xf7\x90\xab\xca\xdd\x6e\xed\xd6\xe6\x81\xa5\x28\xd9\xd6\xd8\x02\x59\x72\x24\x19\x66\x2a\xe1\xbb\x6f\x49\xf2\xbf\x01\xb3\x45\x2a\xd9\x97\x19\xab\xd5\x7f\x7f\xdd\xad\x96\x92\xd2\x54\xfc\x62\x2f\x29\x29\xc9\x2f\xf6\x00\x12\x9d\x29\x56\x1b\xd0\x2a\x5b\x21\x56\x91\x82\x6a\x6c\x36\x06\x5d\x24\x91\xdf\x79\xc2\x54\x1a\x53\xeb\xf3\x28\x22\x37\x64\x83\x0b\x29\x0b\x4e\x49\xcd\x34\xce\x64\xe5\x68\x11\x67\xa9\x8e\x6e\xbe\x34\x54\x6d\xa3\x18\x2f\xf0\x49\xbb\xc0\x15\x13\xf8\x46\x3f\x52\xcd\x99\xb8\x05\x45\xf9\x0a\x69\xb3\xe5\x54\x97\x94\x1a\x04\xa5\xa2\xeb\xef\x33\xd5\xb0\x68\x81\x17\x0b\x7c\x1a\x99\x92\x56\x54\x47\xba\x92\xd2\x94\x82\xea\x8e\xe3\xb8\x61\x38\xd3\x1a\xfd\x50\x44\x83\x99\x41\xe9\x64\x5c\x2e\x1a\xfb\x85\x6b\x62\xb2\xf2\x0f\x46\xef\xe1\xeb\x1e\x00\x40\xce\x74\xcd\xc9\xf6\x1c\x52\x2e\xb3\xdb\xa5\xa3\xd5\x52\x33\xc3\xa4\x38\x07\x92\x6a\xc9\x1b\x43\x3d\xdd\xc8\xfa\x1c\xe6\xfe\x3b\x95\xc6\xc8\xaa\x5f\x72\xba\x36\xfd\x42\xb1\xa2\x1c\x56\xf7\x2c\x37\xe5\x39\x2c\xe6\xf3\xd7\x9e\x50\x52\xbf\xdf\x51\x1e\xac\x87\x51\xef\x62\xd2\xf9\xbd\x07\xb0\x6e\x44\x66\x3d\x81\x9a\xaa\xaa\x31\xf4\xd7\x86\x6a\xbb\xd6\x41\xd8\xfa\xbf\x96\x0a\x82\x3b\xa2\x80\xc1\x0a\xe6\x4b\x60\x90\xc0\x97\x8e\x0b\x73\x2a\x0a\x53\xc2\x31\x2c\x96\xc0\x66\xb3\x4e\x08\xc0\x4a\x70\x2a\x60\x35\xc5\xcc\x9c\xc0\x88\x93\xe5\x1b\x58\x01\x83\x19\x2c\x60\x06\x9f\x88\x29\xf1\x9a\x4b\xa9\x02\xf7\xa9\x88\xc8\x65\x15\x84\x70\x68\x55\x86\xf0\xda\xfe\x8d\xc5\x4d\x55\x8f\x0d\x5d\xb2\x7c\x73\xd5\xed\xef\x52\x77\xd9\xa6\x98\x2c\x8b\xa9\x6a\xbf\xf3\xd0\xa2\xd7\xed\x7f\x74\x7e\x1e\x3b\xdf\x7b\xe8\x04\xdd\x98\x0e\xb7\x1e\xb6\x91\xc4\x6c\xe6\x95\xb1\x35\x04\x63\x45\x17\x4f\xb1\x19\xf0\xdb\x0f\xd0\xab\xac\x51\xd7\xae\x49\x51\x88\x89\x31\x2a\x40\x5a\x65\xe8\x08\xfa\x12\xce\x62\xac\x0d\x31\x2c\x5b\x73\x96\xdd\x2a\x57\xc2\x71\xb4\x98\xbf\x3d\x89\xce\x4e\x4e\xe3\xc5\x62\xb1\x88\xaf\xcf\xe8\xdb\x34\xcd\xe2\x93\x93\x93\xeb\x14\xdf\xd4\x05\x0a\xbb\xa8\x15\x35\x8d\x12\x43\xa4\x7f\x6f\x75\xc0\x68\x14\xc4\x55\x38\x19\xdb\x6c\x31\x51\x25\xbb\xc1\xd5\x8a\x72\x49\x72\x6f\x6a\xf1\x12\x5b\xb3\x45\x67\xed\x61\xd2\x66\xfc\x7d\x36\xe3\x17\xd9\x8c\xc7\x36\x1f\x76\x5a\x26\x57\xe4\xfe\x13\xd1\xb7\x7d\xce\x6d\x29\x66\x44\xdc\x11\x0d\x2b\xc8\x65\xd6\x54\x54\x18\x5c\x50\xf3\x1f\x4e\xed\xe7\xfb\xed\xc7\x3c\x40\x15\xd1\xb7\x1f\x1c\x57\x97\x09\x27\x67\x6c\x65\x79\x69\x2b\xf2\x41\x0a\x43\x37\x26\x38\x88\xf3\x83\x96\x2d\x8a\xe0\xdf\x8a\xdc\x83\xa2\x39\xa4\x72\x03\x46\x42\xc9\x8a\x92\xdb\x66\x07\x53\x52\xc8\xa8\x30\x54\x81\x3b\x81\xb0\x13\xc9\xcc\x06\x73\x26\xe8\x67\x7b\x44\xc0\xaa\x6b\xba\x8e\xfc\x5f\xc9\x6c\x87\x22\x25\x1b\x91\xa3\x61\x4f\x1b\x25\x6f\xe9\x6f\xf6\xc0\x70\xdb\x45\x1a\xc4\x67\x67\x47\xf3\xa3\x79\x38\xe2\x4a\x69\xc1\xc4\x2f\xc4\x94\xc1\x28\x8e\x92\xf0\xb5\x35\xf4\x06\x0e\x21\x5e\x5a\x9f\x3f\x53\xa8\x48\x21\xd8\x7a\xeb\x9c\x94\x8a\x15\x4c\x10\x0e\x2e\x09\x90\x6e\x21\xde\x0c\xce\x56\xf2\x8e\xfe\x2e\x83\x16\x07\x77\xb2\x41\x04\x31\x1c\x3b\xc5\x47\x1d\x40\xfe\x84\x1b\xed\x84\xbb\x81\x4d\xa9\x98\xfd\x93\x2a\x66\x2f\x55\xf1\x7c\x20\x3f\x41\xc5\x93\x40\x7c\x22\x7d\x7e\x5c\xf1\xee\x07\x5d\x5d\x86\x58\x51\x92\x6f\x83\xae\x9c\xfb\x2a\x1e\xca\x7a\xb9\x73\x92\xd9\xa2\xbe\xbc\x1a\x32\x6d\xdd\xb3\x34\x7f\x8d\xb8\xd6\x46\x61\x5d\x73\x66\x02\xf4\xa7\xe8\x2a\x7b\x6a\x78\x38\xb9\xb6\x3d\xa7\x86\x06\x13\xb6\xe8\xf6\xb1\x51\xac\x0a\x1c\xf3\x25\xbb\xea\xcf\x2c\xdb\xf4\x9e\x65\x05\x08\xc1\xb7\x6f\x4e\xe0\x72\x7e\x65\x09\x07\xcb\x83\xc7\x94\x57\x07\x83\x7a\x80\x4c\x0a\xc3\x44\x43\x3b\x6d\x0f\x8f\xcf\x7f\x5c\x37\xba\x74\x06\x76\x8e\x9a\x4c\x0a\x2d\x39\xc5\x5c\x16\x01\xb2\x47\x08\xcd\x01\xc1\xec\xe9\x6c\x9b\x01\x1a\x11\x3b\x18\x44\x53\x5d\xa7\x8d\x31\x1e\xc4\x76\x6c\xef\x07\xc8\xd3\x50\x88\x29\xc9\xca\x21\x13\x4c\xe4\x74\x33\xb8\x3d\x96\x9e\xad\x86\xc1\xb9\x1f\x98\x92\xe9\x10\xfb\xbd\x20\xc4\x99\x9d\x02\x83\x1a\x7a\x37\x0e\xdd\x66\xc0\x29\x5e\x8e\xd1\xe8\xa3\x62\xe1\x40\x7f\x3c\xa8\x12\x98\x5b\x58\x5f\x3c\xbb\x1e\xcf\x96\x31\xd2\x00\xfb\xb8\x96\xda\x04\x28\xe2\xb2\x40\x47\xf0\x15\xfc\x45\x14\x9d\x3f\x33\x61\x8e\x00\x71\x92\x52\x8e\xce\x81\xc1\x43\xd8\xeb\xd9\x1d\xbb\x7d\x46\xbb\xbc\x8d\xa0\xcf\x38\xd1\xda\xd5\xea\x18\xca\xfe\x0a\xf2\xf4\xea\xd3\x8a\x4e\x18\xb0\x49\x93\xf9\x16\x85\xf8\x96\x6e\x9b\x7a\x0c\xb6\xed\xa9\x1e\x02\x0b\xa1\x23\xe1\xfb\x92\x65\x25\x24\x70\xfa\x0e\xa2\xc3\xf9\x61\x64\x91\x1c\xef\x5c\xac\xe0\xf4\x5f\x30\x1b\x3b\x3a\x46\x72\x17\xc7\x87\xbd\x9f\x95\xa1\x69\xbd\xb6\x01\x89\x2b\xd2\xb1\x8b\xc7\x70\xfa\xae\xe3\x1c\xd7\xcc\x74\xbe\x5c\x0f\xd8\xe6\x20\x42\xf7\x69\xf9\x81\xa4\x5b\x7f\xfa\xb4\x4f\xe5\xc4\xa7\xda\xff\x0e\x97\xf2\x24\xf2\x8f\x9e\xc4\xe6\xcb\x5d\x7b\x73\x76\x07\x2c\x5f\xb5\x5d\xe7\x5f\x06\x00\x89\x5f\x5e\xfc\x4f\x82\xb3\x98\x44\x2d\xe1\xf1\x6e\x45\x98\x00\xdd\xa4\x37\x34\x33\x10\x30\x91\xf1\x26\x67\xa2\xb0\x4d\x25\xa5\xd2\x40\x44\x0e\x27\x39\x28\x2a\x72\xaa\x74\x38\xad\xe7\x7d\xc3\xb8\x95\x3a\x02\x69\x07\xb5\x32\x20\xd7\x20\x05\x9d\xe6\xfe\xbf\x29\xa9\x02\xb3\xad\xa9\xb6\x7c\x69\x2b\xac\x23\x6d\x54\x93\x99\x46\x51\xfd\x9c\xbb\x06\x48\xcf\x3f\xb0\x8f\xb9\x93\x28\x67\x77\xee\x23\x55\x3d\x3e\xee\x91\xb0\x42\xfd\x03\x45\x51\x4e\x0c\xbb\xa3\x4b\xff\xc8\x88\xcf\xde\xd4\x9b\x65\xfb\xbe\xf0\x8b\x0e\x46\x56\x15\x0e\xdd\xe1\xfa\xd8\x29\x7b\x4e\x14\x81\xab\xf7\x15\xea\x9f\x4c\x28\x6a\x95\xb5\xb7\x28\xab\x6f\x74\x5d\xf2\x2f\x9d\x15\x8a\xcf\xde\xa0\xf6\x91\xd3\x2e\xbe\xdf\xd2\x45\x12\x79\x23\x23\x28\xf6\x46\x61\x3c\xba\x9e\x76\x16\xba\xd7\x9c\x90\x82\x22\x70\xee\x4e\x8b\xc4\xcf\x8b\x24\x91\x2f\xc9\x24\xf2\xaf\xf3\xbf\x02\x00\x00\xff\xff\x9f\xac\xea\xcd\xa5\x0f\x00\x00")

func dataMrlabelHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dataMrlabelHtml,
		"data/mrlabel.html",
	)
}

func dataMrlabelHtml() (*asset, error) {
	bytes, err := dataMrlabelHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/mrlabel.html", size: 4005, mode: os.FileMode(436), modTime: time.Unix(1509768605, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/mrlabel.html": dataMrlabelHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"mrlabel.html": &bintree{dataMrlabelHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

